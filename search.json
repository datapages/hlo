[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Harmonized Learning Outcomes",
    "section": "",
    "text": "Learning metrics that are comparable for countries globally are necessary to understand and track the formation of human capital. The increasing use of international achievement tests is an important step in this direction. However, such tests are administered primarily in high-income countries, limiting our ability to analyze learning patterns in low- and middle-income countries that may have the most to gain from the formation of human capital. The Harmonized Learning Outcomes (HLO) database bridges this gap by constructing a globally comparable database of 164 countries from 2000 to 2017. The data represent 98% of the global population and developing economies comprise two-thirds of the included countries. The data is publicly available and will be updated regularly."
  },
  {
    "objectID": "about.html#harmonized-learning-outcomes-hlo-database",
    "href": "about.html#harmonized-learning-outcomes-hlo-database",
    "title": "Harmonized Learning Outcomes",
    "section": "",
    "text": "Learning metrics that are comparable for countries globally are necessary to understand and track the formation of human capital. The increasing use of international achievement tests is an important step in this direction. However, such tests are administered primarily in high-income countries, limiting our ability to analyze learning patterns in low- and middle-income countries that may have the most to gain from the formation of human capital. The Harmonized Learning Outcomes (HLO) database bridges this gap by constructing a globally comparable database of 164 countries from 2000 to 2017. The data represent 98% of the global population and developing economies comprise two-thirds of the included countries. The data is publicly available and will be updated regularly."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Harmonized Learning Outcomes (HLO) database",
    "section": "",
    "text": "Plot = import(\"https://esm.sh/@observablehq/plot@0.6.13\")\nd = transpose(data)\n\ndistinct_cutoff = 10\n\ndisc_types = ['string', 'boolean']\ndisc = vars.filter(d =&gt; disc_types.includes(d.type) && d.statistics.numDistinct &lt;= distinct_cutoff).map(d =&gt; [d.label, d.name])\ndisc_vars = new Map([['', null]].concat(disc))\n\ncont_types = ['integer', 'float', 'date', 'datetime', 'time']\ncont = vars.filter(d =&gt; cont_types.includes(d.type) && d.statistics.numDistinct &gt; distinct_cutoff).map(d =&gt; [d.label, d.name])\ncont_vars = new Map(cont)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof x_var = Inputs.select(cont_vars, {value: Array.from(cont_vars.values())[0], label: \"X axis\"})\nviewof y_var = Inputs.select(cont_vars, {value: Array.from(cont_vars.values())[1], label: \"Y axis\"})\nviewof color_var = Inputs.select(disc_vars, {value: Array.from(disc_vars.values())[1], label: \"Color\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndefault_color = d3.schemeCategory10[0]\nplt_color = color_var || default_color\n\nviewof scatter = Plot.plot({\n  style: { fontFamily: \"var(--sans-serif)\" },\n  inset: 8,\n   grid: true,\n      x: { tickFormat: \"\" },\n  color: { legend: true },\n  marks: [\n    Plot.dot(d, {x: x_var, y: y_var, stroke: plt_color}),\n    Plot.tip(d, Plot.pointer({x: x_var, y: y_var, stroke: plt_color})),\n  ]\n})\n\nviewof x_hist = Plot.plot({\n  style: { fontFamily: \"var(--sans-serif)\" },\n  width: 640/2,\n      x: { tickFormat: \"\" },\n      y: { grid: true },\n  marks: [\n    Plot.rectY(d, Plot.binX({y: \"count\"}, {x: x_var, fill: plt_color})),\n    Plot.ruleY([0])\n  ]\n})\n\nviewof y_hist = Plot.plot({\n  style: { fontFamily: \"var(--sans-serif)\" },\n  width: 640/2,\n      y: { grid: true },\n  marks: [\n    Plot.rectY(d, Plot.binX({y: \"count\"}, {x: y_var, fill: plt_color})),\n    Plot.ruleY([0])\n  ]\n})\n\nhtml`&lt;div style=\"display: flex; flex-wrap: wrap; align-items: flex-end;\"&gt;\n &lt;div style=\"flex-basis: 25%\"&gt; ${viewof y_hist} &lt;/div&gt;\n &lt;div style=\"flex-basis: 50%\"&gt; ${viewof scatter} &lt;/div&gt;\n &lt;div style=\"flex-basis: 25%\"&gt; ${viewof x_hist} &lt;/div&gt;\n&lt;/div&gt;`"
  },
  {
    "objectID": "analysis.html",
    "href": "analysis.html",
    "title": "Harmonized Learning Outcomes",
    "section": "",
    "text": "You can access Harmonized Learning Outcomes data programmatically using the Redivis API for R or Python.\n\nRPython\n\n\n\nInstall the redivis-r package:\n\ndevtools::install_github(\"redivis/redivis-r\")\n\nGenerate and set an API token.\nAccess the data:\n\nlibrary(redivis)\n\nuser &lt;- redivis::user(\"datapages\")\ndataset &lt;- user$dataset(\"Harmonized Learning Outcomes\")\ntable &lt;- dataset$table(\"hlo\")\n\n# Load table as tidyverse tibble\ndf &lt;- table$to_tibble()\nView documentation\n\n\n\nInstall the redivis-python client library:\n\npip install --upgrade redivis\n\nGenerate and set an API token.\nAccess the data:\n\nimport redivis\n\nuser = redivis.user(\"datapages\")\ndataset = user.dataset(\"Harmonized Learning Outcomes\")\ntable = dataset.table(\"hlo\")\n\n# Load table as a dataframe\ndf = table.to_pandas_dataframe()\nView documentation"
  },
  {
    "objectID": "analysis.html#programmatic-access",
    "href": "analysis.html#programmatic-access",
    "title": "Harmonized Learning Outcomes",
    "section": "",
    "text": "You can access Harmonized Learning Outcomes data programmatically using the Redivis API for R or Python.\n\nRPython\n\n\n\nInstall the redivis-r package:\n\ndevtools::install_github(\"redivis/redivis-r\")\n\nGenerate and set an API token.\nAccess the data:\n\nlibrary(redivis)\n\nuser &lt;- redivis::user(\"datapages\")\ndataset &lt;- user$dataset(\"Harmonized Learning Outcomes\")\ntable &lt;- dataset$table(\"hlo\")\n\n# Load table as tidyverse tibble\ndf &lt;- table$to_tibble()\nView documentation\n\n\n\nInstall the redivis-python client library:\n\npip install --upgrade redivis\n\nGenerate and set an API token.\nAccess the data:\n\nimport redivis\n\nuser = redivis.user(\"datapages\")\ndataset = user.dataset(\"Harmonized Learning Outcomes\")\ntable = dataset.table(\"hlo\")\n\n# Load table as a dataframe\ndf = table.to_pandas_dataframe()\nView documentation"
  }
]